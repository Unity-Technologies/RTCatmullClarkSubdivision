#pragma kernel CSMain
#define CCS_VERTEX_WRITE
#include "../CatmullClark_Gather.cginc"


float3 EdgePoint_Smooth(in const float3 ve[2], in const float3 vf[2])
{
	return (ve[0] + ve[1] + vf[0] + vf[1]) / 4.0f;
}

float3 EdgePoint_Crease(in const float3 ve[2])
{
	return (ve[0] + ve[1]) / 2.0f;
}

int _DispatchDistributer;

[numthreads(256, 1, 1)]
void CSMain(uint3 id : SV_DispatchThreadID)
{
	const int cageID = 0;
	const uint threadID = id.x + id.y * _DispatchDistributer * 256 + id.z * _DispatchDistributer * _DispatchDistributer * 256;
	const int edgeID = int(threadID);
	const int edgeCount = ccm_EdgeCount;

	if (edgeID < edgeCount)
	{
		const int vertexCount = ccm_VertexCount;
		const int faceCount = ccm_FaceCount;
		const int vertexID = vertexCount + faceCount + edgeID;
		const int halfedgeID = ccm_EdgeToHalfedgeID(cageID, edgeID);
		const int twinID = ccm_HalfedgeTwinID(cageID, halfedgeID);
		const int nextID = ccm_HalfedgeNextID(cageID, halfedgeID);
		const float sharp = ccm_CreaseSharpness(cageID, edgeID);
		const float edgeWeight = min(sharp, 1.0f);
		const float3 oldEdgePoints[2] =
		{
			ccm_HalfedgeVertexPoint(cageID, halfedgeID),
			ccm_HalfedgeVertexPoint(cageID, nextID)
		};
		const float3 newAdjacentFacePoints[2] =
		{
			ccs_VertexPoint(cageID, vertexCount + ccm_HalfedgeFaceID(cageID, halfedgeID)),
			ccs_VertexPoint(cageID, vertexCount + ccm_HalfedgeFaceID(cageID, max(0, twinID)))
		};
		const float3 creaseEdgePoint = EdgePoint_Crease(oldEdgePoints);
		const float3 smoothEdgePoint = EdgePoint_Smooth(oldEdgePoints, newAdjacentFacePoints);
		const float3 newEdgePoint = lerp(smoothEdgePoint, creaseEdgePoint, edgeWeight);

		WriteVertex(cageID, vertexID, newEdgePoint);
	}
}
